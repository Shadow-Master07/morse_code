.SUFFIXES:   # disable implicit rules

CC = gcc

# Directories
SRC_DIR = src
INT_DIR = intermediates
PRE_DIR = $(INT_DIR)/preprocessed
ASM_DIR = $(INT_DIR)/assembly
OBJ_DIR = $(INT_DIR)/objects
BIN_DIR = $(INT_DIR)/binary
LINK_DIR = $(INT_DIR)/link

BIN = ./main.exe
MAP = $(LINK_DIR)/main.map

# Sources and transformed file lists
SRC = $(wildcard $(SRC_DIR)/*.c)
PRE = $(patsubst $(SRC_DIR)/%.c, $(PRE_DIR)/%.i, $(SRC))
ASM = $(patsubst $(SRC_DIR)/%.c, $(ASM_DIR)/%.s, $(SRC))
OBJ = $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(SRC))

# Flags
CFLAGS = -Wall -Ilib

# Default target
all: $(BIN)

# Link step (produce exe + map file)
$(BIN): $(OBJ) | $(BIN_DIR) $(LINK_DIR)
	$(CC) $(OBJ) -o $@ -Wl,-Map,$(MAP)

# Object step (from assembly)
$(OBJ_DIR)/%.o: $(ASM_DIR)/%.s | $(OBJ_DIR)
	$(CC) -c $< -o $@

# Assembly step (from preprocessed)
$(ASM_DIR)/%.s: $(PRE_DIR)/%.i | $(ASM_DIR)
	$(CC) $(CFLAGS) -S -masm=intel $< -o $@

# Preprocessing step (from C source)
$(PRE_DIR)/%.i: $(SRC_DIR)/%.c | $(PRE_DIR)
	$(CC) $(CFLAGS) -E $< -o $@

# Ensure directories exist
$(PRE_DIR) $(ASM_DIR) $(OBJ_DIR) $(BIN_DIR) $(LINK_DIR):
	@if not exist "$@" mkdir "$@"

# -------------------
# Explicit stages
# -------------------
preprocessed: $(PRE)
assembly: $(ASM)
objects: $(OBJ)

# Debug build
debug: CFLAGS += -g -O0
debug: clean all

clean:
	@if exist "$(INT_DIR)" rmdir /S /Q "$(INT_DIR)"
	@if exist "./main.exe" del "./main.exe"

# Run target
run: all
	$(BIN)

.PHONY: all clean debug run preprocessed assembly objects
